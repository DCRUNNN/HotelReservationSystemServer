package service.Order.CreateOrder;

import service.Client.ProvidedService.ClientProvidedService;
import service.Client.ProvidedService.ClientProvidedServiceImpl;
import service.Strategy.ProvidedService.StrategyProvidedService;
import service.Strategy.ProvidedService.StrategyProvidedServiceImpl;

/**
 * 负责与client模块和strategy模块进行交互
 * @see StrategyProvidedService
 * @see ClientProvidedService
 * */
public class AboutStrategy {

	private StrategyProvidedService strategyservice;
	private ClientProvidedService clientservice;
	
	public AboutStrategy(){
		strategyservice = new StrategyProvidedServiceImpl();
		clientservice = new ClientProvidedServiceImpl();
	}
	
	/**
	 * @param clientID 客户编号
	 * @param hotelInfo 酒店相关信息(hotelID+"/"+hotelProvince+"/"+hotelCity+"/"+hotelCBD+"/"+hotelName)
	 * @param roomTotal 房间总数
	 * @return 得到客户在该酒店的综合的最优惠的策略
	 * */
	public double getPriceByStrategy(String clientID,String hotelInfo,int roomTotal){
		
		 double discount = 0;
		 String userType = clientservice.getUserType(clientID);
		 //对客户类型的简单判断逻辑放在这边
		 if("普通客户".equals(userType)){
			 //是普通客户的话，对应的折扣只能是在特定期间内预订或者是预订数目超过特定数字
			 discount = strategyservice.getBestStrategyForNormalUser(hotelInfo,roomTotal);
		 }else if("普通会员".equals(userType)){
			 //普通会员的话，对应的折扣包括：特定期间预订，预订数目超出，生日特惠，在特定商圈预订有折扣
			 String birthday = clientservice.getVipBirthday(clientID);
			 int vipGrade = clientservice.getVipGrade(clientID);
			 discount = strategyservice.getBestStrategyForNormalVip(hotelInfo,roomTotal,birthday,vipGrade);
		 }else{
			 //企业会员的话，对应的折扣包括：特定期间预订，预订数目超出，在特定的酒店有优惠
			 
			 discount = strategyservice.getBestStrategyForCompanyVip(hotelInfo,roomTotal);
		 }
         
         return discount;
	}

	/**
	 * @return 判断客户的信用值是否大于等于0
	 * */
	public boolean checkCreditPoint(String clientID) {
		return clientservice.checkCreditPoint(clientID);
	}
}
